def corePlugin = ''

buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'gradle'
            url 'https://plugins.gradle.org/m2/'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/groups/public'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.11'
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish'
apply plugin: 'org.sonarqube'

javadoc {
    failOnError = false
}

description = 'Additional Loot Tables'
def mod_file = getModFile()
def mc_version = '1.15.2'

ext {
    short_version = getVersion('VERSION', mod_file)
}

version = mc_version + '-' + short_version
if (System.getenv().BUILD_NUMBER) {
    version += '.' + System.getenv().BUILD_NUMBER
}
group = 'com.mcmoddev'
// Need this here so eclipse task generates correctly.
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'


class Secrets {
    def data = null

    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile
if (System.getenv().SECRET_FILE) {
    secretFile = file System.getenv().SECRET_FILE
} else {
    secretFile = file 'secret.json'
}

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

minecraft {
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    // mappings channel: 'snapshot', version: '20190719-1.14.3'
    mappings channel: 'snapshot', version: '20200225-1.15.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                alt {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                alt {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'alt', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                alt {
                    source sourceSets.main
                }
            }
        }
    }
}
//minecraft {
//    version = '1.12.2-14.23.4.2705'
//    runDir = 'run'
//    mappings = 'stable_39'

//	replace '@FINGERPRINT@', project.findProperty('signSHA1')
//}

repositories {
    maven {
        name 'MMD'
        url 'https://maven.mcmoddev.com/'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    // minecraft 'net.minecraftforge:forge:1.15.1-30.0.41'
    minecraft 'net.minecraftforge:forge:1.15.2-31.1.47'

    // runtime fileTree(dir: 'libs', include: '*.jar')
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }
        resources {
            srcDir "src/main/resources"
            srcDir "src/generated/resources"
        }
    }
}

jar {
    manifest {
    }
}

//task apiJar(type: Jar) {
//    classifier = 'apiClasses'
//    from apiClasses
//}

task deobfJar(type: Jar) {
    classifier = 'deobf'
    from sourceSets.main.output
}

/*
task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing. 
    // Using project.propName would cause the script to fail validation if 
    // the property did not exist. 
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
*/

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
//  archives apiJar
    archives deobfJar
//    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
//            artifact sourceJar {
//                classifier 'sources'
//            }
//            artifact apiJar {
//                classifier 'api'
//            }
            artifact deobfJar {
                classifier 'deobf'
            }
            artifact javadocJar {
                classifier 'javadoc'
            }
        }
    }
    repositories {
        maven {
            credentials {
                username secret.username
                password secret.password
            }
            url secret.url
        }
    }
}

 curseforge {
     apiKey = secret.curseforgeAPIKey
     project {
         id = '243157'
         changelog = file('CHANGELOG.txt')
         releaseType = 'release'
         addGameVersion(project.mc_version)
         def projectName = 'Additional Loot Tables'
         def displayVersion = getVersion('VERSION', mod_file)
         if (System.getenv().BUILD_NUMBER) {
             displayVersion += '.' + System.getenv().BUILD_NUMBER
         }
         mainArtifact(jar) {
             displayName = "$project.description $displayVersion"
 //          relations {
 //          }
         }
 //        addArtifact(apiJar) {
 //            displayName = "$project.description $displayVersion API"
 //        }
 //        addArtifact(sourceJar) {
 //            displayName = "$project.description $displayVersion Sources"
 //        }
         addArtifact(deobfJar) {
             displayName = "$project.description $displayVersion Development"
         }
         addArtifact(javadocJar) {
             displayName = "$project.description $displayVersion Javadoc"
         }
     }
 }

 sonarqube {
     properties {
         property 'sonar.host.url', secret.sonarHost
         property 'sonar.organization', secret.sonarOrganization
         property 'sonar.login', secret.sonarToken
         property 'sonar.projectName', project.archivesBaseName
         property 'sonar.projectKey', "$project.group:$project.archivesBaseName"
     }
 }

String getModFile() {
    String path = ''
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit { element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim()
                if (s.startsWith('@Mod(')) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path
}

String getVersion(String type, String mod_file) {
    String major = '0'
    String revision = '0'
    String patch = '0'
    String prefix = "public static final String $type = \""
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim()
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2)
            String[] pts = s.split("\\.")

            major = pts[0]
            revision = pts[1]
            patch = pts[2]
        }
    }
    return "$major.$revision.$patch"
}
